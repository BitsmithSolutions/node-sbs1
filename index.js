// # SBS1
//
// This module parses ASCII messages containing Mode-S ADS-B messages
// sent by the SBS-1 BaseStation receiver and compatible systems on
// network port 30003.
//
// Here are some examples of messages this module parses:
//
// ```
// SEL,,496,2286,4CA4E5,27215,2010/02/19,18:06:07.710,2010/02/19,18:06:07.710,RYR1427
// ID,,496,7162,405637,27928,2010/02/19,18:06:07.115,2010/02/19,18:06:07.115,EZY691A
// AIR,,496,5906,400F01,27931,2010/02/19,18:06:07.128,2010/02/19,18:06:07.128
// STA,,5,179,400AE7,10103,2008/11/28,14:58:51.153,2008/11/28,14:58:51.153,RM
// CLK,,496,-1,,-1,2010/02/19,18:18:19.036,2010/02/19,18:18:19.036
// MSG,1,145,256,7404F2,11267,2008/11/28,23:48:18.611,2008/11/28,23:53:19.161,RJA1118,,,,,,,,,,,
// MSG,2,496,603,400CB6,13168,2008/10/13,12:24:32.414,2008/10/13,12:28:52.074,,,0,76.4,258.3,54.05735,-4.38826,,,,,,0
// ```
//
// There is some documentation of the message format at
// http://www.homepages.mcb.net/bones/SBS/Article/Barebones42_Socket_Data.htm.

// ## Message Types
//
// SBS1 Sends 6 kinds of messages: 5 are generated by events in the
// SBS1 software itself, `SEL`, `ID`, `AIR`, `STA`, and `CLK`; Only 1
// contains information sent by aircraft: `MSG`.

var MessageType = {
  // Generated when the user changes the selected aircraft in
  // BaseStation.
  SELECTION_CHANGE: 'SEL',
  // Generated when an aircraft being tracked sets or changes its
  // callsign.
  NEW_ID: 'ID',
  // Generated when the SBS picks up a signal for an aircraft that it
  // isn't currently tracking,
  NEW_AIRCRAFT: 'AIR',
  // Generated when an aircraft's status changes according to the
  // time-out values in the SBS1 Data Settings menu.
  STATUS_CHANGE: 'STA',
  // Generated when the user double-clicks (or presses return) on an
  // aircraft (i.e. to bring up the aircraft details window).
  CLICK: 'CLK',
  // Generated by the aircraft. There are eight different MSG
  // transmission types, see `TransmissionType`.
  TRANSMISSION: 'MSG'
};


// ## Transmission Types
//
// Transmission messages (MSG) from aircraft may be one of eight types
// (ES = Extended Squitter, DF = Downlink Format, BDS = B-Definition
// Subfield).
//
// |Type|Description                     |Spec          |
// |----|--------------------------------|--------------|
// | 1  | ES identification and category | DF17 BDS 0,8 |
// | 2  | ES surface position message    | DF17 BDS 0,6 |
// | 3  | ES airborne position message   | DF17 BDS 0,5 |
// | 4  | ES airborne velocity message   | DF17 BDS 0,9 |
// | 5  | Surveillance alt message       | DF4, DF20    |
// | 6  | Surveillance ID message        | DF5, DF21    |
// | 7  | Air-to-air message             | DF16         |
// | 8  | All call reply                 | DF11         |

var TransmissionType = {
  ES_IDENT_AND_CATEGORY: 1,
  // Triggered by the nose gear squat switch.
  ES_SURFACE_POS: 2,
  ES_AIRBORNE_POS: 3,
  ES_AIRBORNE_VEL: 4,
  // Triggered by ground radar. Not CRC secured. MSG,5 will only be
  // output if the aircraft has previously sent a MSG,1, 2, 3, 4 or 8
  // signal.
  SURVEILLANCE_ALT: 5,
  // Triggered by ground radar. Not CRC secured. MSG,5 will only be
  // output if the aircraft has previously sent a MSG,1, 2, 3, 4 or 8
  // signal.
  SURVEILLANCE_ID: 6,
  // Triggered by TCAS.
  AIR_TO_AIR: 7,
  // Broadcast but also triggered by ground radar.
  ALL_CALL_REPLY: 8
};


// ## Parsing messages
//
// We do basic data type conversion (parsing into integers, floats,
// etc.).
//
// Fields that are empty in the original message--an empty string
// between commas but actually present in the message--are turned into
// `null`.  Fields that are not present in a message--for example,
// field #23 in a message that only contains 12 fields--are turned
// into `undefined`.

function parse_sbs1_message(s) {
  var parts = s.split(',');
  m = new SBS1Message(parts)
  return m;
}



// ## SBS1Message

SBS1Message = function(parts) {
  // Replace empty strings (,,) with nulls.
  parts = parts.map(function (e) {
    if (e === '') {
      return null;
    } else {
      return e;
    }
    });
  this.message_type = parts[0];
  this.transmission_type = sbs1_value_to_int(parts[1]);
  // Validate transmission (MSG) messages.
  if (this.message_type == MessageType.TRANSMISSION_TYPE &&
      this.transmission_type < 1 || this.transmission_type > 8) {
    throw new Error('Unknown message type: ' + parts[1]);
  }
  this.session_id = sbs1_value_to_int(parts[2]);
  this.aircraft_id = sbs1_value_to_int(parts[3]);
  this.hex_ident = parts[4];
  this.flight_id = sbs1_value_to_int(parts[5]);
  this.generated_date = parts[6];
  this.generated_time = parts[7];
  this.logged_date = parts[8];
  this.logged_time = parts[9];
  this.callsign = parts[10];
  this.altitude = sbs1_value_to_int(parts[11]);
  this.ground_speed = sbs1_value_to_int(parts[12]);
  this.track = sbs1_value_to_int(parts[13]);
  this.lat = sbs1_value_to_float(parts[14]);
  this.lon = sbs1_value_to_float(parts[15]);
  this.vertical_rate = sbs1_value_to_int(parts[16]);
  this.squawk = parts[17];
  this.alert = sbs1_value_to_bool(parts[18]);
  this.emergency = sbs1_value_to_bool(parts[19]);
  this.spi = sbs1_value_to_bool(parts[20]);
  this.is_on_ground = sbs1_value_to_bool(parts[21]);
}


// Parse the `generated_date` and `generated_time` fields into a
// `Date`.
SBS1Message.prototype.generated_timestamp = function() {
  return new Date(this.generated_date + ' ' + this.generated_time);
};


// Parse the `logged_date` and `logged_time` fields into a
// `Date`.
SBS1Message.prototype.logged_timestamp = function() {
  return new Date(this.logged_date + ' ' + this.logged_time);
};


// Convert a value into undefined, null or a boolean.
function sbs1_value_to_bool(v) {
  if (v === undefined || v === null) {
    return v;
  } else {
    return !(v === '0');
  }
}


// Convert a value into undefined, null or an integer.
function sbs1_value_to_int(v) {
  if (v === undefined || v === null) {
    return v;
  } else {
    return parseInt(v, 10);
  }
}


// Convert a value into undefined, null or a float.
function sbs1_value_to_float(v) {
  if (v === undefined || v === null) {
    return v;
  } else {
    return parseFloat(v);
  }
}


exports.parse_sbs1_message = parse_sbs1_message;
exports.MessageType = MessageType;
exports.TransmissionType = TransmissionType;
